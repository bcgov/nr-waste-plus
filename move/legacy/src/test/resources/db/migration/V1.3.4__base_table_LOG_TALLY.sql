-- DDL migration for LOG_TALLY (DBeaver style)
CREATE TABLE LOG_TALLY (
    DETAIL_DOCUMENT_NUMBER VARCHAR2(13) NOT NULL,
    VERSION NUMBER(2,0) NOT NULL,
    BATDOC_ID NUMBER(32,0),
    SCALE_EVENT_TYPE_CODE VARCHAR2(2) NOT NULL,
    SCL_RTN_VERSION_STATE_CODE VARCHAR2(3) NOT NULL,
    SCALE_DATE DATE NOT NULL,
    SCALE_SITE_ID_NMBR VARCHAR2(4),
    CUT_BLOCK_ID VARCHAR2(10),
    TIMBER_MARK VARCHAR2(6),
    TIMBER_BRAND VARCHAR2(7),
    PRIMARY_QUANT_LIC_TYPE_CD VARCHAR2(1),
    PRIMARY_LICENSE_NUMBER VARCHAR2(4),
    SECONDARY_QUANT_LIC_TYPE_CD VARCHAR2(1),
    SECONDARY_LICENSE_NUMBER VARCHAR2(4),
    SIGNING_QUANT_LIC_TYPE_CD VARCHAR2(1),
    SIGNING_LICENSE_NUMBER VARCHAR2(4),
    RETURN_NUMBER NUMBER(4,0) NOT NULL,
    LOG_COUNT NUMBER(4,0) NOT NULL,
    NET_VOLUME NUMBER(7,3),
    PARCEL_COUNT NUMBER(1,0),
    PARCEL_IDENTIFIER NUMBER(1,0),
    VOLUME_CALC_METHOD_TYPE VARCHAR2(1),
    ORIG_CHK_SCL_QUANT_LIC_TYPE_CD VARCHAR2(1),
    ORIGINAL_DDN VARCHAR2(13),
    ORIGINAL_DDV NUMBER(2,0),
    ORIG_CHK_SCL_LICENSE_NUMBER VARCHAR2(4),
    ORIG_CHK_SCL_RETURN_NUMBER NUMBER(4,0),
    ORIG_REDTAG_SCALE_SITE_ID_NMBR VARCHAR2(4),
    RED_TAG_WEIGH_SLIP VARCHAR2(10),
    ORIGINAL_VERSION_IND VARCHAR2(1) NOT NULL,
    VALID_SIGNATURE_IND VARCHAR2(1) NOT NULL,
    ACTIVE_VERSION_IND VARCHAR2(1) NOT NULL,
    BEACHCOMB_IND VARCHAR2(1),
    CHECK_REPLACES_ORIGINAL_IND VARCHAR2(1),
    FIELD_SCALE_IND VARCHAR2(1),
    FIELD_SCALE_DECK_ID VARCHAR2(1),
    TRANSPORT_IDENTIFIER VARCHAR2(16),
    INCOMING_LDS_NUMBER VARCHAR2(10),
    LOAD_ARRIVAL_NUMBER VARCHAR2(10),
    LOG_TALLY_COMMENT VARCHAR2(240),
    DTL_DOC_SEQ NUMBER(32,0) NOT NULL,
    INPUT_ORIG_REDTAG_SCL_SITE VARCHAR2(4),
    INPUT_SECONDARY_SCALER_LIC VARCHAR2(4),
    INPUT_SIGNING_SCALER_LIC VARCHAR2(4),
    INPUT_CUTBLOCK_ID VARCHAR2(10),
    INPUT_PRIMARY_SCALER_LIC VARCHAR2(4),
    INPUT_ORIGINAL_DDN VARCHAR2(13),
    INPUT_ORIGINAL_DDV NUMBER(2,0),
    INPUT_ORIG_CHK_SCL_SCALER_LIC VARCHAR2(4),
    INPUT_SOURCE VARCHAR2(7),
    INPUT_SCALE_SITE VARCHAR2(4),
    ENCRYPTED_SIGNATURE RAW(512),
    HBS_ENCR_KEY_ID NUMBER(2,0),
    INPUT_HBS_ENCR_KEY_ID NUMBER(2,0),
    HBS_RSA_PADDING_ID NUMBER(2,0),
    DECRYPTED_SIGNATURE VARCHAR2(128),
    HASH_TOTAL VARCHAR2(128),
    HBS_CRYPT_METHOD_ID NUMBER(2,0),
    SIGNING_DATE_TIME DATE,
    ENTRY_USERID VARCHAR2(30) NOT NULL,
    ENTRY_TIMESTAMP DATE NOT NULL,
    UPDATE_USERID VARCHAR2(30),
    UPDATE_TIMESTAMP DATE
);

-- Explicit CHECK constraints
ALTER TABLE LOG_TALLY ADD CONSTRAINT SYS_C0017800 CHECK (DETAIL_DOCUMENT_NUMBER IS NOT NULL);
ALTER TABLE LOG_TALLY ADD CONSTRAINT SYS_C0017801 CHECK (VERSION IS NOT NULL);
ALTER TABLE LOG_TALLY ADD CONSTRAINT SYS_C0017802 CHECK (SCALE_EVENT_TYPE_CODE IS NOT NULL);
ALTER TABLE LOG_TALLY ADD CONSTRAINT SYS_C0017803 CHECK (SCL_RTN_VERSION_STATE_CODE IS NOT NULL);
ALTER TABLE LOG_TALLY ADD CONSTRAINT SYS_C0017804 CHECK (SCALE_DATE IS NOT NULL);
ALTER TABLE LOG_TALLY ADD CONSTRAINT SYS_C0017805 CHECK (RETURN_NUMBER IS NOT NULL);
ALTER TABLE LOG_TALLY ADD CONSTRAINT SYS_C0017806 CHECK (LOG_COUNT IS NOT NULL);
ALTER TABLE LOG_TALLY ADD CONSTRAINT SYS_C0017807 CHECK (ORIGINAL_VERSION_IND IS NOT NULL);
ALTER TABLE LOG_TALLY ADD CONSTRAINT SYS_C0017808 CHECK (VALID_SIGNATURE_IND IS NOT NULL);
ALTER TABLE LOG_TALLY ADD CONSTRAINT SYS_C0017809 CHECK (ACTIVE_VERSION_IND IS NOT NULL);
ALTER TABLE LOG_TALLY ADD CONSTRAINT SYS_C0017810 CHECK (DTL_DOC_SEQ IS NOT NULL);
ALTER TABLE LOG_TALLY ADD CONSTRAINT SYS_C0017811 CHECK (ENTRY_USERID IS NOT NULL);
ALTER TABLE LOG_TALLY ADD CONSTRAINT SYS_C0017812 CHECK (ENTRY_TIMESTAMP IS NOT NULL);
ALTER TABLE LOG_TALLY ADD CONSTRAINT SYS_C0039571 CHECK (ACTIVE_VERSION_IND IN ('Y', 'N'));
ALTER TABLE LOG_TALLY ADD CONSTRAINT SYS_C0039572 CHECK (BEACHCOMB_IND IN ('Y', 'N'));
ALTER TABLE LOG_TALLY ADD CONSTRAINT SYS_C0039573 CHECK (CHECK_REPLACES_ORIGINAL_IND IN ('Y', 'N'));
ALTER TABLE LOG_TALLY ADD CONSTRAINT SYS_C0039574 CHECK (FIELD_SCALE_IND IN ('Y', 'N'));
ALTER TABLE LOG_TALLY ADD CONSTRAINT SYS_C0039575 CHECK (ORIGINAL_VERSION_IND IN ('Y', 'N'));
ALTER TABLE LOG_TALLY ADD CONSTRAINT SYS_C0039576 CHECK (VOLUME_CALC_METHOD_TYPE IN ('G', 'N'));
ALTER TABLE LOG_TALLY ADD CONSTRAINT C$LOGTAL_ORGDDNDDV CHECK ((ORIGINAL_DDV IS NULL AND ORIGINAL_DDN IS  NULL) OR (ORIGINAL_DDV IS NOT NULL AND ORIGINAL_DDN IS NOT NULL AND SCALE_EVENT_TYPE_CODE = 'CS'));
ALTER TABLE LOG_TALLY ADD CONSTRAINT C$05_LOG_TALLY_CUT_BLK_ID CHECK (BATDOC_ID IS NULL OR (INPUT_CUTBLOCK_ID IS NULL AND SCALE_EVENT_TYPE_CODE IN ( 'FD','4R','CU' )) OR (INPUT_CUTBLOCK_ID IS NOT NULL AND SCALE_EVENT_TYPE_CODE NOT IN ( 'FD','4R','CU' )));
ALTER TABLE LOG_TALLY ADD CONSTRAINT C$17_LOG_TALLY_BCOMB_IND CHECK (BEACHCOMB_IND IS NULL AND SCALE_EVENT_TYPE_CODE IN ( '4R', 'CU' ) OR (BEACHCOMB_IND IS NOT NULL AND SCALE_EVENT_TYPE_CODE NOT IN ( '4R', 'CU' )));
ALTER TABLE LOG_TALLY ADD CONSTRAINT C$01_LOG_TALLY_LD_ARVL_NO CHECK (LOAD_ARRIVAL_NUMBER IS NULL AND SCALE_EVENT_TYPE_CODE IN ( 'RT', 'CS', 'CU' ) OR (LOAD_ARRIVAL_NUMBER IS NOT NULL AND SCALE_EVENT_TYPE_CODE NOT IN ( 'RT', 'CS', 'CU' )));
ALTER TABLE LOG_TALLY ADD CONSTRAINT C$02_LOG_TALLY_IN_LDS_NO CHECK (INCOMING_LDS_NUMBER IS NOT NULL AND SCALE_EVENT_TYPE_CODE NOT IN ( 'FD', 'RT', 'CS', 'CU' ) OR (INCOMING_LDS_NUMBER IS NULL AND SCALE_EVENT_TYPE_CODE IN ( 'FD', 'RT', 'CS', 'CU' )));
ALTER TABLE LOG_TALLY ADD CONSTRAINT C$03_LOG_TALLY_TRANS_ID CHECK (TRANSPORT_IDENTIFIER IS NULL AND SCALE_EVENT_TYPE_CODE IN ( 'FD', 'RT', 'CS', 'CU' ) OR (TRANSPORT_IDENTIFIER IS NOT NULL AND SCALE_EVENT_TYPE_CODE NOT IN ( 'FD', 'RT', 'CS', 'CU' ) ));
ALTER TABLE LOG_TALLY ADD CONSTRAINT C$04_LOG_TALLY_SOURCE CHECK ((BATDOC_ID IS NULL OR (INPUT_SOURCE IS NULL AND SCALE_EVENT_TYPE_CODE IN ( 'DP', 'CU' )) OR (INPUT_SOURCE IS NOT NULL AND SCALE_EVENT_TYPE_CODE NOT IN ( 'DP', 'CU' ))) AND ((TIMBER_MARK IS NULL AND TIMBER_BRAND IS NULL ) OR (TIMBER_MARK IS NOT NULL AND TIMBER_BRAND IS NULL ) OR (TIMBER_MARK IS NULL AND TIMBER_BRAND IS NOT NULL )));
ALTER TABLE LOG_TALLY ADD CONSTRAINT C$06_LOG_TALLY_FLD_SCL_IND CHECK (FIELD_SCALE_IND IS NULL AND SCALE_EVENT_TYPE_CODE IN ( '4R', 'CU' ) OR (FIELD_SCALE_IND IS NOT NULL AND SCALE_EVENT_TYPE_CODE NOT IN ( '4R', 'CU' )));
ALTER TABLE LOG_TALLY ADD CONSTRAINT C$07_LOG_TALLY_FLD_SCL_DK_ID CHECK (FIELD_SCALE_IND IS NULL AND SCALE_EVENT_TYPE_CODE IN ( '4R', 'CU' ) OR (SCALE_EVENT_TYPE_CODE NOT IN ( '4R', 'CU' ) ));
ALTER TABLE LOG_TALLY ADD CONSTRAINT C$08_LOG_TALLY_WEIGH_SLIP_NO CHECK (RED_TAG_WEIGH_SLIP IS NULL AND SCALE_EVENT_TYPE_CODE IN ( 'PS', 'FD', 'CS', '4R', 'CU' ) OR (RED_TAG_WEIGH_SLIP IS NOT NULL AND SCALE_EVENT_TYPE_CODE NOT IN ( 'PS', 'FD', 'CS', '4R', 'CU' )));
ALTER TABLE LOG_TALLY ADD CONSTRAINT C$09_LOG_TALLY_ORIG_RT_SITE CHECK (BATDOC_ID IS NULL OR (INPUT_ORIG_REDTAG_SCL_SITE IS NULL AND SCALE_EVENT_TYPE_CODE IN ( 'PS', 'FD', 'RT', 'CS', '4R', 'CU' )) OR (INPUT_ORIG_REDTAG_SCL_SITE IS NOT NULL AND SCALE_EVENT_TYPE_CODE NOT IN ( 'PS', 'FD', 'RT', 'CS', '4R', 'CU' )));
ALTER TABLE LOG_TALLY ADD CONSTRAINT C$10_LOG_TALLY_PARCEL_COUNT CHECK (PARCEL_COUNT IS NULL AND SCALE_EVENT_TYPE_CODE IN ( 'FD', 'CS', 'CU' ) OR (SCALE_EVENT_TYPE_CODE NOT IN ( 'FD', 'CS', 'CU' )));
ALTER TABLE LOG_TALLY ADD CONSTRAINT C$11_LOG_TALLY_PARCEL_ID CHECK (PARCEL_IDENTIFIER IS NULL AND SCALE_EVENT_TYPE_CODE IN ( 'FD', 'CS', 'CU' ) OR (SCALE_EVENT_TYPE_CODE NOT IN ( 'FD', 'CS', 'CU' )));
ALTER TABLE LOG_TALLY ADD CONSTRAINT C$12_LOG_TALLY_ORIG_SCLR_LIC CHECK (BATDOC_ID IS NULL OR (INPUT_ORIG_CHK_SCL_SCALER_LIC IS NULL AND SCALE_EVENT_TYPE_CODE <> 'CS' ) OR (INPUT_ORIG_CHK_SCL_SCALER_LIC IS NOT NULL AND SCALE_EVENT_TYPE_CODE = 'CS' ));
ALTER TABLE LOG_TALLY ADD CONSTRAINT C$13_LOG_TALLY_ORIG_RET_NO CHECK (ORIG_CHK_SCL_RETURN_NUMBER IS NULL AND SCALE_EVENT_TYPE_CODE <> 'CS' OR (ORIG_CHK_SCL_RETURN_NUMBER IS NOT NULL AND SCALE_EVENT_TYPE_CODE = 'CS' ));
ALTER TABLE LOG_TALLY ADD CONSTRAINT C$15_LOG_TALLY_SCL_MTHD CHECK (VOLUME_CALC_METHOD_TYPE IS NULL AND SCALE_EVENT_TYPE_CODE IN ('4R', 'CU') OR (VOLUME_CALC_METHOD_TYPE IS NOT NULL AND SCALE_EVENT_TYPE_CODE NOT IN ('4R', 'CU')));
ALTER TABLE LOG_TALLY ADD CONSTRAINT C$16_LOG_TALLY_LOG_COUNT CHECK (LOG_COUNT = 0 AND SCALE_EVENT_TYPE_CODE IN ( '4R', 'CU' ) OR (LOG_COUNT > 0 AND SCALE_EVENT_TYPE_CODE NOT IN ( '4R', 'CU' ) ));

-- Primary Key
ALTER TABLE LOG_TALLY ADD CONSTRAINT LOG_TALLY_PK PRIMARY KEY (DETAIL_DOCUMENT_NUMBER, VERSION);

-- Unique Index

-- Non-unique Indexes
CREATE INDEX I3$_LOG_TALLY ON LOG_TALLY (DETAIL_DOCUMENT_NUMBER);
CREATE INDEX LOGTALLY_BATDOC_FK_I ON LOG_TALLY (BATDOC_ID);
CREATE INDEX LOGTALLY_MOF_SS_FK_I ON LOG_TALLY (SCALE_SITE_ID_NMBR);
CREATE INDEX LOGTALLY_MOF_TM_FK_I ON LOG_TALLY (TIMBER_MARK);
CREATE INDEX LOGTALLY_ORIG_CHK_SCL_QL_FK_I ON LOG_TALLY (ORIG_CHK_SCL_QUANT_LIC_TYPE_CD);
CREATE INDEX LOGTALLY_ORIG_REDTAG_SS_FK_I ON LOG_TALLY (ORIG_REDTAG_SCALE_SITE_ID_NMBR);
CREATE INDEX LOGTALLY_PRIMARY_QL_FK_I ON LOG_TALLY (PRIMARY_QUANT_LIC_TYPE_CD);
CREATE INDEX LOGTALLY_SETC_FK_I ON LOG_TALLY (SCL_RTN_VERSION_STATE_CODE);
CREATE INDEX LOGTALLY_VER_STATUS_FK_I ON LOG_TALLY (ACTIVE_VERSION_IND);
CREATE INDEX LOG_TALLY_HRPS_FK_I ON LOG_TALLY (HBS_RSA_PADDING_ID);
CREATE INDEX LOG_TALLY_HCM_FK_I ON LOG_TALLY (HBS_CRYPT_METHOD_ID);
CREATE INDEX LOG_TALLY_HEK_FK1_I ON LOG_TALLY (HBS_ENCR_KEY_ID);

-- Foreign keys (to be added separately)